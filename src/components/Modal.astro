---
// Modal.astro
const { isOpen = false, content, pageLanguage } = Astro.props;
---

<div class="modal-overlay" style:display={isOpen ? "block" : "none"}>
    <div class="modal">
        <button class="close-button">Ã—</button>
        <h2>{content.title[pageLanguage]}</h2>
        <p>{content.shortDescription[pageLanguage]}</p>
        <div class="modal-image-grid">
            {
                content.images.map((image) => {
                    return (
                        <div class="modal-grid-item">
                            <img src={image} />
                        </div>
                    );
                })
            }
        </div>
        {content.lists.map((list) => {
            return (<h3>
                {list.title[pageLanguage]}
            </h3>
            <ul>
                {list.content.map((listitem) => {
                    return (<li>{listitem[pageLanguage]}</li>)
                })}
            </ul>)
        })}
        <!--<div
            set:html={content.optionalRichtext.content[pageLanguage]}
            class="rich-text-dark"
        />-->
    </div>
</div>
<script>
    // public/modal.js
    document.addEventListener("DOMContentLoaded", () => {
        const modals = Array.from(document.querySelectorAll(".modal-overlay"));
        const openBtn = document.getElementById("openModal");
        modals.forEach((modal) => {
            let prev = modal.previousElementSibling;
            while (prev) {
                if (prev.classList.contains("openBtn")) {
                    prev.addEventListener("click", () => {
                        modal.style.display = "block";
                    });
                    break;
                }
                prev = prev.previousElementSibling;
            }
            const closeBtn = modal.querySelector(".close-button");
            closeBtn?.addEventListener("click", () => {
                modals.forEach((everyModal) => {
                    everyModal.style.display = "none";
                });
            });
        });
    });
</script>
<style>
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        background: rgba(0, 0, 0, 0.9);
        display: none;
        z-index: 1000;
        width: 100vw;
        height: 100vh;
        overflow-y: scroll;
        overflow-x: hidden;
    }

    .modal {
        background: transparent;
        padding: 6rem 2rem;
        border-radius: 0.5rem;
        min-height: 100vh;
        width: 100%;
        max-width: 1200px;
        margin: auto;
    }

    .close-button {
        position: fixed;
        top: 15px;
        left: 15px;
        color: white;
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        z-index: 1001;
    }
    .modal-image-grid {
        position: relative;
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        max-width: 100%;
        gap: 15px;
        @media screen and (max-width: 820px) {
            grid-template-columns: 1fr;
        }
    }
    .modal-image-grid img {
        object-fit: cover;
        width: 100%;
        height: auto;
        border-radius: 25px;
    }
    h2 {
        color: var(--sand) !important;
        font-size: 1.6rem;
        text-transform: uppercase;
    }
    p {
        color: var(--lightgray);
        font-size: 1rem;
    }
    h3 {
        color: var(--sand);
    }
    ul, li {
        color: var(--lightgray);
    }
</style>
