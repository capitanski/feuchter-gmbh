---
import "../styles/base.css";
import "../styles/richtext.css";
import "../styles/richtext-dark.css";
import Navbar from "../components/Navbar.astro";
import Footer from "@/components/Footer.astro";
import Login from "../components/Login.astro";
import TarteaucitronLoader from "@/components/TarteaucitronLoader.astro";
import type { AstroLocals } from "@/types";
//const { languages } = Astro.props;
const { locals } = Astro as unknown as { locals: AstroLocals };
const {pageTitle, pageDescription} = Astro.props; // Kommt von den jeweiligen Seiten
const pageLanguage = locals.language; // Holt die aktuelle Sprache aus der Middleware (wichtig für html lang tag und Layoutkomponenten)
const languages = locals.languages; // Holt die Sprachlinks aus Middleware (wichtig für hreflang, canonical und langSwitcher Tags in Navbar)
// Jede Komponente, die in diesem Layout definiert ist, muss den language Prop übergeben bekommen (Damit die richtigen)
// Sprachelemente gefetcht werden
// Die nächsten Zeilen sind wichtig, um die korrekten hreflangtags
// auch auf Seiten mit searchParams zu setzen
const { url } = Astro.request;
const searchParams = new URL(url).searchParams;
const searchCategory = searchParams.get("category");
let searchparamString = "";
if (searchCategory) {
  searchparamString = `?category=${searchCategory}`;
}
---

<!doctype html>
<html lang={pageLanguage}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon_globe.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{pageTitle}</title>
    <meta
      name="description"
      content={pageDescription}
    />
    <link rel="canonical" href={languages[0].url} />
    {
      languages.map(({ lang, url }) => (
        <link rel="alternate" hreflang={lang} href=`${url}${searchparamString}` />
      ))
    }
    <link rel="stylesheet" href="https://use.typekit.net/eff4wzj.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css" />
    <script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js" defer
></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js" defer></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels" defer></script>
<script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "LocalBusiness",
  "name": "Feuchter GmbH",
  "image": "https://feuchter.com/feuchter_gmbh_logo.svg",
  "description": "Hersteller für Militär- und Survivalkleidung, Behörden- und Sicherheitskleidung, Corporate Fashion sowie nachhaltige Lösungen für Rollcontainer",
  "url": "https://www.feuchter.com",
  "telephone": "+43 771 22 95 000",
  "email": "office@feuchter.com",
  "address": {
    "@type": "PostalAddress",
    "streetAddress": "Bachweg 8",
    "addressLocality": "Ringelai",
    "postalCode": "94160",
    "addressCountry": "DE"
  },
  "openingHours": [
    "Mo-Fr 08:00-17:00"
  ],
  "sameAs": [
    //"https://www.facebook.com/deinunternehmen",
    //"https://www.linkedin.com/company/deinunternehmen"
  ]
}
</script>
  </head>
  <body id="body">
    <Login />
    <Navbar language={pageLanguage} languages={languages} />
    <slot />
    <Footer language={pageLanguage} languages={languages} />
    <TarteaucitronLoader lang={pageLanguage} />
  </body>
</html>
<script>
  window.addEventListener("DOMContentLoaded", () => {
    // CUSTOM INTERSECTION OBSERVER
    // Alle zu beobachtenden Elemente auswählen
    const elements = document.querySelectorAll(".animatable");
    const images = document.querySelectorAll(".animatable-opacity");
    const inRight = document.querySelectorAll(".animate-in-right");
    // Intersection Observer erstellen
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("in-view"); // Klasse hinzufügen
          } else {
            entry.target.classList.remove("in-view"); // Klasse entfernen
          }
        });
      },
      { threshold: 0.3 },
    ); // Aktiviert, wenn 30% sichtbar
    const secondObserver = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("in-view-opacity"); // Klasse hinzufügen
          } else {
            entry.target.classList.remove("in-view-opacity"); // Klasse entfernen
          }
        });
      },
      { threshold: 0.3 },
    );
    const thirdObserver = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("in-view"); // Klasse hinzufügen
          } else {
            entry.target.classList.remove("in-view"); // Klasse entfernen
          }
        });
      },
      { threshold: 0.3 },
    );
    // Jedes Element dem Observer hinzufügen
    elements.forEach((el) => observer.observe(el));
    images.forEach((el) => secondObserver.observe(el));
    inRight.forEach((el) => thirdObserver.observe(el));
  });
</script>
<style>
  :root {
    font-family: "Inter", sans-serif;
  }
  html,
  body {
    margin: 0;
    padding: 0;
    width: 100%;
    height: 100%;
    overflow-x: hidden;
    scroll-behavior: smooth;
    position: relative;
    background: var(--verydarkgray);
    z-index: -1;
  }
</style>
