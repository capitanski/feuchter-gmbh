---
import "../styles/base.css";
import "../styles/richtext.css";
import "../styles/richtext-dark.css";
import Navbar from "../components/Navbar.astro";
import Footer from "@/components/Footer.astro";
import Login from "../components/Login.astro";
import type { AstroLocals } from "@/types";
//const { languages } = Astro.props;
const { locals } = Astro as unknown as { locals: AstroLocals };
const pageLanguage = locals.language; // Holt die aktuelle Sprache aus der Middleware (wichtig für html lang tag und Layoutkomponenten)
const languages = locals.languages; // Holt die Sprachlinks aus Middleware (wichtig für hreflang, canonical und langSwitcher Tags in Navbar)
// Jede Komponente, die in diesem Layout definiert ist, muss den language Prop übergeben bekommen (Damit die richtigen)
// Sprachelemente gefetcht werden
// Die nächsten Zeilen sind wichtig, um die korrekten hreflangtags
// auch auf Seiten mit searchParams zu setzen
const { url } = Astro.request;
const searchParams = new URL(url).searchParams;
const searchCategory = searchParams.get("category");
let searchparamString = "";
if (searchCategory) {
  searchparamString = `?category=${searchCategory}`;
}
---

<!doctype html>
<html lang={pageLanguage}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>Feuchter GmbH - Bekleidungslösungen</title>
    <meta
      name="description"
      content="Jakob Matuschek - Saxophonmusik aus dem Herzen Passau's"
    />
    <link rel="canonical" href={languages[0].url} />
    {
      languages.map(({ lang, url }) => (
        <link rel="alternate" hreflang={lang} href=`${url}${searchparamString}` />
      ))
    }
    <link rel="stylesheet" href="https://use.typekit.net/eff4wzj.css">
  </head>
  <body id="body">
    <Login />
    <Navbar language={pageLanguage} languages={languages} />
    <slot />
    <Footer language={pageLanguage} languages={languages} />
  </body>
</html>
<script>
  window.addEventListener("DOMContentLoaded", () => {
    // CUSTOM INTERSECTION OBSERVER
    // Alle zu beobachtenden Elemente auswählen
    const elements = document.querySelectorAll(".animatable");
    const images = document.querySelectorAll(".animatable-opacity");
    const inRight = document.querySelectorAll(".animate-in-right");
    // Intersection Observer erstellen
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("in-view"); // Klasse hinzufügen
          } else {
            entry.target.classList.remove("in-view"); // Klasse entfernen
          }
        });
      },
      { threshold: 0.3 },
    ); // Aktiviert, wenn 30% sichtbar
    const secondObserver = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("in-view-opacity"); // Klasse hinzufügen
          } else {
            entry.target.classList.remove("in-view-opacity"); // Klasse entfernen
          }
        });
      },
      { threshold: 0.3 },
    );
    const thirdObserver = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("in-view"); // Klasse hinzufügen
          } else {
            entry.target.classList.remove("in-view"); // Klasse entfernen
          }
        });
      },
      { threshold: 0.3 },
    );
    // Jedes Element dem Observer hinzufügen
    elements.forEach((el) => observer.observe(el));
    images.forEach((el) => secondObserver.observe(el));
    inRight.forEach((el) => thirdObserver.observe(el));
  });
</script>
<style>
  :root {
    font-family: "Inter", sans-serif;
  }
  html,
  body {
    margin: 0;
    padding: 0;
    width: 100%;
    height: 100%;
    overflow-x: hidden;
    scroll-behavior: smooth;
    position: relative;
  }
</style>
